--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.18.1 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local BASE_EVENT_NAME = "BLINK"
local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

local Null = newproxy()

type Entry = {
    value: any,
    next: Entry?
}

type Queue = {
    head: Entry?,
    tail: Entry?
}

type BufferSave = {
    Size: number, 
    Cursor: number, 
    Buffer: buffer, 
    Instances: {Instance}
}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local function CreateQueue(): Queue
    return {
        head = nil,
        tail = nil
    }
end

local function Pop(queue: Queue): any
    local head = queue.head
    if head == nil then
        return
    end

    queue.head = head.next
    return head.value
end

local function Push(queue: Queue, value: any)
    local entry: Entry = {
        value = value,
        next = nil
    }

    if queue.tail ~= nil then
        queue.tail.next = entry
    end

    queue.tail = entry

    if queue.head == nil then
        queue.head = entry
    end
end

local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

Queue.Reliable[0] = table.create(256)
export type MarketplaceProductType = ("AvatarBundle" | "AvatarAsset")
export type ProductInfo = { Name: string, Description: string, PriceInRobux: number?, ProductType: string?, IsForSale: boolean, IsLimited: boolean, BundleId: number?, BundleProductId: number?, MarketplaceProductType: ("AvatarBundle" | "AvatarAsset") }
export type ProductIdTemplate = { Type: ("AvatarBundle" | "AvatarAsset"), Id: string }
export type PurchaseIdList = {[number]: { Type: ("AvatarBundle" | "AvatarAsset"), Id: string }}
local function WriteFUNCTION_DATA_GetProductInfo(Value: number, InvocationIdentifier: number): ()
	-- Allocate BLOCK: 10 bytes
	local BLOCK_START = Allocate(10)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 0)
	buffer.writeu8(SendBuffer, BLOCK_START + 1, InvocationIdentifier)
	buffer.writef64(SendBuffer, BLOCK_START + 2, Value)
end

local function ReadFUNCTION_RETURN_GetProductInfo(): ({ Name: string, Description: string, PriceInRobux: number?, ProductType: string?, IsForSale: boolean, IsLimited: boolean, BundleId: number?, BundleProductId: number?, MarketplaceProductType: ("AvatarBundle" | "AvatarAsset") })
	-- Read BLOCK: 12 bytes
	local BLOCK_START = Read(12)
	local Success = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	if Success ~= 1 then
		error("Server encountered an error.")
	end
	local Value = {} :: any
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 1)
	Value.Name = buffer.readstring(RecieveBuffer, Read(Length), Length)
	Length = buffer.readu16(RecieveBuffer, BLOCK_START + 3)
	Value.Description = buffer.readstring(RecieveBuffer, Read(Length), Length)
	if buffer.readu8(RecieveBuffer, BLOCK_START + 5) == 1 then
		-- Read BLOCK: 4 bytes
		local BLOCK_START = Read(4)
		Value.PriceInRobux = buffer.readf32(RecieveBuffer, BLOCK_START + 0)
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 6) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
		Value.ProductType = buffer.readstring(RecieveBuffer, Read(Length), Length)
	end
	Value.IsForSale = (buffer.readu8(RecieveBuffer, BLOCK_START + 7) == 1)
	Value.IsLimited = (buffer.readu8(RecieveBuffer, BLOCK_START + 8) == 1)
	if buffer.readu8(RecieveBuffer, BLOCK_START + 9) == 1 then
		-- Read BLOCK: 4 bytes
		local BLOCK_START = Read(4)
		Value.BundleId = buffer.readf32(RecieveBuffer, BLOCK_START + 0)
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 10) == 1 then
		-- Read BLOCK: 8 bytes
		local BLOCK_START = Read(8)
		Value.BundleProductId = buffer.readf64(RecieveBuffer, BLOCK_START + 0)
	end
	Value.MarketplaceProductType = true :: any
	local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 11)
	if Index == 0 then
		Value.MarketplaceProductType = "AvatarBundle"
	elseif Index == 1 then
		Value.MarketplaceProductType = "AvatarAsset"
	else
		error(`Unexpected enum: {Index}`)
	end
	return Value
end

local function WriteEVENT_PromptPurchase(Value: {[number]: { Type: ("AvatarBundle" | "AvatarAsset"), Id: string }}): ()
	-- Allocate BLOCK: 3 bytes
	local BLOCK_START = Allocate(3)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 1)
	local Elements_1 = 0
	for Key_1, Element_1 in Value do
		Elements_1 += 1
		local OFFSET_0 = Allocate(8)
		buffer.writef64(SendBuffer, OFFSET_0, Key_1)
		local OFFSET_1 = Allocate(1)
		if Element_1.Type == "AvatarBundle" then
			buffer.writeu8(SendBuffer, OFFSET_1, 0)
		elseif Element_1.Type == "AvatarAsset" then
			buffer.writeu8(SendBuffer, OFFSET_1, 1)
		else
			error(`Unexpected enum: {Element_1.Type}, expected one of "AvatarBundle" or "AvatarAsset".`)
		end
		local Length = #Element_1.Id
		local OFFSET_2 = Allocate(2)
		buffer.writeu16(SendBuffer, OFFSET_2, Length)
		Allocate(Length)
		buffer.writestring(SendBuffer, SendOffset, Element_1.Id, Length)
	end
	buffer.writeu16(SendBuffer, BLOCK_START + 1, Elements_1)
end

if not RunService:IsRunning() then
	local NOOP = function() end
	local Returns = table.freeze({
	GetProductInfo = {
		Invoke = NOOP
	},
	PromptPurchase = {
		Fire = NOOP
	},
	})
	return Returns :: BLINK_EVENTS_SYMBOL
end

if not RunService:IsClient() then
    error("Client network module can only be required from the client.")
end

local Reliable: RemoteEvent = ReplicatedStorage:WaitForChild(BASE_EVENT_NAME .. "_RELIABLE_REMOTE") :: RemoteEvent
local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:WaitForChild(BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent

local function StepReplication()
    if SendCursor <= 0 then
        return
    end

    local Buffer = buffer.create(SendCursor)
    buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
    Reliable:FireServer(Buffer, SendInstances)

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    table.clear(SendInstances)
end
RunService.Heartbeat:Connect(StepReplication)
Reliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 0 then
			-- Read BLOCK: 1 bytes
			local BLOCK_START = Read(1)
			local InvocationIdentifier = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
				local Success, ReturnValue = pcall(function ()
					return ReadFUNCTION_RETURN_GetProductInfo()
				end)
			if Calls[InvocationIdentifier] ~= nil then
				task.spawn(Calls[InvocationIdentifier], Success, ReturnValue)
				Calls[InvocationIdentifier] = nil
			end
		end
	end
end)
Unreliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	end
end)


local Returns = table.freeze({
	StepReplication = StepReplication,

	GetProductInfo = {
		Invoke = function(Value: number): ({ Name: string, Description: string, PriceInRobux: number?, ProductType: string?, IsForSale: boolean, IsLimited: boolean, BundleId: number?, BundleProductId: number?, MarketplaceProductType: ("AvatarBundle" | "AvatarAsset") })
			local InvocationIdentifier = Invoke()
			if Calls[InvocationIdentifier] ~= nil then
				Invocations -= 1
				error("More than 256 calls are awaiting a response, this packet has been dropped.")
			end
			WriteFUNCTION_DATA_GetProductInfo(Value, InvocationIdentifier)
			Calls[InvocationIdentifier] = coroutine.running()
			local Success, ReturnValue: { Name: string, Description: string, PriceInRobux: number?, ProductType: string?, IsForSale: boolean, IsLimited: boolean, BundleId: number?, BundleProductId: number?, MarketplaceProductType: ("AvatarBundle" | "AvatarAsset") } = coroutine.yield()
			if Success ~= true then
				error("There was an exception while processing \"GetProductInfo\".")
			end
			return ReturnValue
		end
	},
	PromptPurchase = {
		Fire = function(Value: {[number]: { Type: ("AvatarBundle" | "AvatarAsset"), Id: string }}): ()
			WriteEVENT_PromptPurchase(Value)
		end
	},
})
type BLINK_EVENTS_SYMBOL = typeof(Returns)
return Returns :: BLINK_EVENTS_SYMBOL